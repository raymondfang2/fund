{"version":3,"sources":["web3.js","factory.js","pages/Welcome.js","pages/FundDetail.js","fund.js","App.js","reportWebVitals.js","index.js"],"names":["window","ethereum","request","method","web3","Web3","instance","eth","Contract","FundFactory","abi","Welcome","state","charityOwner","funds","fundName","errorMessage","loading","onSubmit","event","a","preventDefault","setState","givenProvider","selectedAddress","currentAccount","console","log","factory","methods","raiseFund","send","from","message","location","reload","call","getFunds","this","items","map","address","link","header","description","to","fluid","Card","Group","Grid","padded","Row","Column","width","Form","error","Field","Input","value","onChange","target","Message","content","Button","primary","length","renderFunds","React","Component","FundDetail","fundAddress","balance","numRequests","donatorsCount","manager","props","match","params","fund","Fund","getSummary","summary","meta","style","overflowWrap","utils","fromWei","withRouter","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.699be7ad.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\nconst  web3 = new Web3(window.ethereum);\n\nexport default web3;\n","import web3 from \"./web3\";\nimport FundFactory from \"./contracts/FundFactory.json\";\n\nconst instance = new web3.eth.Contract(\n  FundFactory.abi,\n  \"0x6969853dEEd9C3F1EeEC96188f8542d250C69665\"\n);\n//replace the above address with the output of \"truffle migrate ...\" --> the contract address of FundFactory\n//Only the account deployed the above factory can raise fund --> the charityOwner\nexport default instance;\n","import React from \"react\";\n//Semantic UI\nimport { Card, Form, Grid, Button, Input, Message } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n//React-Route\nimport { Link} from 'react-router-dom'\n\nimport web3 from \"../web3\";\nimport factory from \"../factory\";\nimport fund from \"../fund\";\n\nclass Welcome extends React.Component {\n    //1. This is part of the constructor will be invoked when page launch index.js\n    state = {\n        charityOwner: '',\n        funds:[],\n        //For raising fund\n        fundName: '',\n        errorMessage: '',\n        loading: false\n    };\n\n\n\n    //3. This will be invoked after rendering\n    //state.manager changed\n    //4. state change will cause the re-render!\n    async componentDidMount() {\n        const charityOwner = await factory.methods.charityOwner().call();\n        const funds = await factory.methods.getFunds().call();\n        console.log(\"=====>\");\n        console.log(charityOwner);\n        this.setState({ charityOwner, funds });\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault(); //Not classical html way\n        this.setState({loading: true, errorMessage: ''});\n\n        try {\n            //const accounts = await web3.eth.getAccounts();\n            const currentAccount = await web3.givenProvider.selectedAddress;\n            console.log(\"<======\");\n            console.log(currentAccount);\n\n            await factory.methods.raiseFund(this.state.fundName).send({\n                //from: accounts[0]\n                from: currentAccount\n            });\n        } catch (err) {\n            this.setState({errorMessage: err.message});\n        }\n\n        this.setState({loading: false});\n        window.location.reload(); //refresh the page to show the new Fund raised!\n    }\n\n\n    renderFunds()  {\n        const items = this.state.funds.map((address)=> {\n            const link = \"/detail/\"+address;\n            return {\n                header: address,\n                description: <Link to={link}>View Fund Detail</Link>,\n                fluid: true\n            }\n        });\n        return <Card.Group items={items} />;\n    }\n\n\n\n\n    //2. render to be called\n    render() {\n        return (\n            <div >\n                <Grid padded>\n                    <Grid.Row>\n                        <Grid.Column width={10} >\n                            <h2>Raise a new Fund</h2>\n                            <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                                <Form.Field>\n                                    <label>Fund Name:</label>\n                                    <Input\n                                        value={this.state.fundName}\n                                        onChange={(event)=> {\n                                            this.setState({fundName: event.target.value})\n                                        }}\n                                    />\n                                </Form.Field>\n                                <Message error header=\"Oops!\" content={this.state.errorMessage}/>\n                                <Button loading={this.state.loading} primary>Create!</Button>\n                            </Form>\n                        </Grid.Column>\n                        <Grid.Column width={6}> </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column width={10} >\n                            <h2>Fund List.</h2>\n\n                            <p>This contract is managed by {this.state.charityOwner}</p>\n                            <p>There are currently {this.state.funds.length} funds</p>\n                            <div>{this.renderFunds()}</div>\n                        </Grid.Column>\n                        <Grid.Column width={6}> </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        );\n    }\n}\nexport default Welcome;\n","import React from \"react\";\n//Semantic UI\nimport {Button, Card, Form, Grid, Input, Message} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n//React-Route\nimport { withRouter } from 'react-router-dom'\n\nimport web3 from \"../web3\";\nimport Fund from \"../fund\";\n\nclass FundDetail extends React.Component {\n    //1. This is part of the constructor will be invoked when page launch index.js\n    state = {\n        fundAddress: '',\n        fundName: '',\n        balance: '',\n        numRequests: '',\n        donatorsCount: '',\n        manager: ''\n    };\n\n\n\n    //3. This will be invoked after rendering\n    //state.manager changed\n    //4. state change will cause the re-render!\n    async componentDidMount() {\n        const fundAddress = this.props.match.params.fundAddress; //Passed from Welcome.js\n        this.setState({fundAddress});\n\n        const fund = Fund(fundAddress);\n\n        const summary = await fund.methods.getSummary().call();\n\n        console.log(\"=====>\");\n        console.log(summary[0]);\n\n        this.setState({\n            fundAddress: fundAddress,\n            fundName: summary[0],\n            balance: summary[1],\n            numRequests: summary[2],\n            donatorsCount: summary[3],\n            manager: summary[4]\n        })\n\n    }\n\n    renderFunds() {\n        const items = [{\n            header: this.state.manager,\n            meta: \"Address of Manager\",\n            description:\n                \"The manager created this Fund and can create requests to withdraw money\",\n            style: { overflowWrap: \"break-word\" },\n        },\n            {\n                header: this.state.numRequests,\n                meta: \"Number of Requests\",\n                description:\n                    \"A request tries to withdraw money from the contract. Requests must be approved by donators\",\n            },\n            {\n                header: this.state.donatorsCount,\n                meta: \"Number of Donators\",\n                description:\n                    \"Number of people who have already donated to this fund\",\n            },\n            {\n                header: web3.utils.fromWei(this.state.balance, \"ether\"),\n                meta: \"Fund Balance (ether)\",\n                description:\n                    \"The balance is how much money this fund has left to spend.\",\n            },\n        ];\n\n        return <Card.Group items={items}/>;\n    }\n\n    //2. render to be called\n    render() {\n        return (\n            <div >\n                <Grid padded>\n                    <Grid.Row>\n                        <Grid.Column width={10} >\n                            <h2>Fund Detail</h2>\n                            <div>{this.renderFunds()}</div>\n                        </Grid.Column>\n                        <Grid.Column width={6}>\n                            <h2>TODO: Donate Form here</h2>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column width={10} >\n                            <h2>Request List with Approval Below</h2>\n\n                        </Grid.Column>\n                        <Grid.Column width={6}> </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        );\n    }\n}\nexport default withRouter(FundDetail);\n\n\n","import web3 from \"./web3\";\nimport Fund from \"./contracts/Fund.json\";\n\n\nexport default (address) => {\n    return new web3.eth.Contract(\n        Fund.abi,\n        address\n    );\n};\n","//React-Route\nimport React from \"react\";\nimport {Redirect, Route} from 'react-router-dom'\nimport Welcome from \"./pages/Welcome\";\nimport FundDetail from \"./pages/FundDetail\";\n\nclass App extends React.Component {\n\n  render() {\n    return (\n        <div >\n            <Route exact path=\"/\">\n                <Welcome/>\n            </Route>\n            <Route exact path=\"/fund\">\n                <Welcome/>\n            </Route>\n            <Route exact path=\"/detail/:fundAddress\">\n                    <FundDetail/>\n            </Route>\n\n\n        </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}