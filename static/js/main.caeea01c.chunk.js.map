{"version":3,"sources":["web3.js","factory.js","pages/Barchart.js","fund.js","pages/Welcome.js","pages/ContributeForm.js","pages/RequestForm.js","pages/RequestRow.js","pages/FundDetail.js","App.js","reportWebVitals.js","index.js"],"names":["window","ethereum","request","method","web3","Web3","instance","eth","Contract","FundFactory","abi","Barchart","data","this","props","chartData","options","plugins","title","display","text","legend","position","Component","address","Fund","Welcome","state","charityOwner","funds","fundName","errorMessage","loading","onSubmit","event","a","preventDefault","setState","givenProvider","selectedAddress","currentAccount","console","log","factory","methods","raiseFund","send","from","message","location","reload","call","getFunds","bckColor","labels","backgroundColor","getFundBalances","fundBalances","currentBckColor","i","length","currentSummary","push","datasets","label","borderWidth","items","map","link","header","description","to","fluid","Card","Group","src","process","width","height","Grid","padded","Row","Column","Form","error","Field","Input","value","onChange","target","Message","content","Button","primary","renderFunds","className","React","ContributeForm","fund","contribute","labelPosition","RequestForm","recipient","createRequest","RequestRow","onApprove","approveRequest","id","Table","Cell","donatorsCount","utils","fromWei","approvalCount","complete","color","basic","onClick","FundDetail","fundAddress","balance","numRequests","manager","requests","match","params","getSummary","summary","Promise","all","Array","parseInt","fill","element","index","meta","style","overflowWrap","renderFund","Header","HeaderCell","Body","renderRequestRows","withRouter","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.caeea01c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\nconst  web3 = new Web3(window.ethereum);\n\nexport default web3;\n","import web3 from \"./web3\";\nimport FundFactory from \"./contracts/FundFactory.json\";\n\nconst instance = new web3.eth.Contract(\n  FundFactory.abi,\n  \"0x05EDC19c9C6DA045dB3C8Fc260EbEc1897b7B0eE\"\n  // \"0xD34fdF127573241FBF69A598F82045DF870a9640\"\n);\n//replace the above address with the output of \"truffle migrate ...\" --> the contract address of FundFactory\n//Only the account deployed the above factory can raise fund --> the charityOwner\nexport default instance;\n","import { Component } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nclass Barchart extends  Component {\n\n\n    render() {\n\n        return (\n            <div>\n                <Bar\n                    data={this.props.chartData}\n                    options={{\n                        plugins: {\n                            title: {\n                                display: true,\n                                text: \"Amount Raised in Wei\"\n                            },\n                            legend: {\n                                display: true,\n                                position: \"bottom\",\n                            }\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default Barchart;\n","import web3 from \"./web3\";\nimport Fund from \"./contracts/Fund.json\";\n\n\nexport default (address) => {\n    return new web3.eth.Contract(\n        Fund.abi,\n        address\n    );\n};\n","import React from \"react\";\n//Semantic UI\nimport { Image, Card, Form, Grid, Button, Input, Message } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n//React-Route\nimport { Link} from 'react-router-dom'\n\nimport web3 from \"../web3\";\nimport factory from \"../factory\";\nimport Barchart from \"./Barchart\";\nimport Fund from \"../fund\";\n\nclass Welcome extends React.Component {\n    //1. This is part of the constructor will be invoked when page launch index.js\n    state = {\n        charityOwner: '',\n        funds:[],\n        //For raising fund\n        fundName: '',\n        errorMessage: '',\n        loading: false,\n        //For Barchart, init with empty\n        chartData: ''\n    };\n\n\n\n    //3. This will be invoked after rendering\n    //state.manager changed\n    //4. state change will cause the re-render!\n    async componentDidMount() {\n        const charityOwner = await factory.methods.charityOwner().call();\n        const funds = await factory.methods.getFunds().call();\n        console.log(\"=====>\");\n        console.log(charityOwner);\n        //Chartbar: 1. Fetch the following data from funds object 2. Push to Github 3. Test\n        //rotate color is more than 7\n        const bckColor = [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(255, 159, 64, 0.2)',\n            'rgba(255, 205, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(54, 162, 235, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(201, 203, 207, 0.2)'\n        ];\n        const labels = [];\n        const data = [];\n        const backgroundColor=[];\n        //use fund to fetch 'name' and 'amount'\n        const fundBalances = await factory.methods.getFundBalances().call();\n        let currentBckColor=0;\n        for (let i = 0; i < funds.length; i++) {\n            let currentSummary = fundBalances[i] //0 - name, 1- balance\n            labels.push(currentSummary[0]);\n            data.push(currentSummary[1]);\n            backgroundColor.push(bckColor[currentBckColor]);\n            currentBckColor++;\n            if (currentBckColor==bckColor.length) {\n                currentBckColor = 0; //rotate from 0 again\n            }\n        }\n\n        const chartData = {\n            labels: labels,\n            datasets: [{\n                label: 'Funds',\n                data: data,\n                backgroundColor: backgroundColor,\n                borderWidth: 1\n            }]\n        };\n\n        this.setState({ charityOwner, funds, chartData });\n\n        console.log(this.state.chartData);\n\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault(); //Not classical html way\n        this.setState({loading: true, errorMessage: ''});\n\n        try {\n            //const accounts = await web3.eth.getAccounts();\n            const currentAccount = await web3.givenProvider.selectedAddress;\n            console.log(\"<======\");\n            console.log(currentAccount);\n\n            await factory.methods.raiseFund(this.state.fundName).send({\n                //from: accounts[0]\n                from: currentAccount\n            });\n        } catch (err) {\n            this.setState({errorMessage: err.message});\n        }\n\n        this.setState({loading: false});\n        window.location.reload(); //refresh the page to show the new Fund raised!\n    }\n\n\n    renderFunds()  {\n        const items = this.state.funds.map((address)=> {\n            const link = \"/detail/\"+address;\n            return {\n                header: address,\n                description: <Link to={link}>View Fund Detail</Link>,\n                fluid: true\n            }\n        });\n        return <Card.Group items={items} />;\n    }\n\n\n\n\n    //2. render to be called\n    render() {\n        return (\n            <div >\n                {/*<Image src={process.env.PUBLIC_URL + '/charity.jpeg'} size='medium' centered/>*/}\n                <Link to='/'><img src={process.env.PUBLIC_URL + '/charity.jpeg'} width=\"100%\" height=\"150\" /></Link>\n                <Grid padded>\n                    <Grid.Row>\n                        <Grid.Column width={6} >\n                            <h2>Raise a new Fund</h2>\n                            <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                                <Form.Field>\n                                    <label>Fund Name:</label>\n                                    <Input\n                                        value={this.state.fundName}\n                                        onChange={(event)=> {\n                                            this.setState({fundName: event.target.value})\n                                        }}\n                                    />\n                                </Form.Field>\n                                <Message error header=\"Oops!\" content={this.state.errorMessage}/>\n                                <Button loading={this.state.loading} primary>Create!</Button>\n                            </Form>\n                        </Grid.Column>\n                        <Grid.Column width={10}> </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column width={6} >\n                            <h2>Fund List.</h2>\n\n                            <p>This contract is managed by {this.state.charityOwner}</p>\n                            <p>There are currently {this.state.funds.length} funds</p>\n                            <div>{this.renderFunds()}</div>\n                        </Grid.Column>\n                        <Grid.Column width={10}>\n                            {/*Only show BarChart when chartData is ready*/}\n                            {this.state.chartData && <Barchart chartData={this.state.chartData}/>}\n                            {!this.state.chartData && <div className=\"ui active inline loader\"></div>\n                            }\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        );\n    }\n}\nexport default Welcome;\n","import React, { Component } from \"react\";\nimport {Form, Input, Message, Button} from \"semantic-ui-react\";\n\nimport web3 from \"../web3\";\nimport Fund from \"../fund\";\n\n\nclass ContributeForm extends  Component {\n    state = {\n        value: '',\n        errorMessage: '',\n        loading: false\n    };\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n        const fund = Fund(this.props.address);\n        this.setState({loading: true, errorMessage: ''});\n        try {\n            console.log(\"=========> contribution...\");\n            //const accounts = await  web3.eth.getAccounts();\n            const currentAccount = await web3.givenProvider.selectedAddress;\n            console.log(\"=========>\");\n            console.log(currentAccount);\n            console.log(\"=========>\")\n            await  fund.methods.contribute().send({\n                from: currentAccount,\n                value: this.state.value\n            });\n            window.location.reload(); //refresh the current detail page -> show the donated amount inside\n        } catch (err) {\n            console.log(\"==============>\");\n            console.log(err.message);\n            this.setState({errorMessage: err.message});\n        }\n\n        this.setState({loading: false, value: ''});\n\n    }\n\n    render() {\n        return(\n            <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                <Form.Field>\n                    <label>Amount to Contribute</label>\n                    <Input\n                        value={this.state.value}\n                        label=\"wei\"\n                        labelPosition=\"right\"\n                        onChange={event=>this.setState({value: event.target.value})} />\n                </Form.Field>\n                <Message error header=\"Oops!\" content={this.state.errorMessage}/>\n                <Button primary loading={this.state.loading}>Contribute!</Button>\n            </Form>\n        );\n    }\n}\n\nexport default ContributeForm;\n","import React, {Component} from \"react\";\nimport { Form, Button, Message, Input } from \"semantic-ui-react\";\n\nimport web3 from \"../web3\";\nimport Fund from \"../fund\";\n\nclass RequestForm extends Component {\n    state = {\n        value: \"\",\n        description: \"\",\n        recipient: \"\",\n        loading: false,\n        errorMessage: ''\n    };\n\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n\n        const fund = Fund(this.props.address);\n        const { description, value, recipient } = this.state;\n\n        this.setState({loading: true, errorMessage: ''});\n\n        try {\n            const currentAccount = await web3.givenProvider.selectedAddress;\n            await fund.methods\n                .createRequest(description, value, recipient)\n                .send({ from: currentAccount });\n\n            window.location.reload(); //refresh the current detail page -> show the donated amount inside\n        } catch (err) {\n            console.log(\"===========>\");\n            console.log(err.message);\n            this.setState({ errorMessage: err.message});\n        }\n\n        this.setState({loading: false});\n    };\n\n\n    render() {\n        return (\n                <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                    <Form.Field>\n                        <label>Description</label>\n                        <Input\n                            value={this.state.description}\n                            onChange={(event) =>\n                                this.setState({ description: event.target.value })\n                            }\n                        />\n                    </Form.Field>\n\n                    <Form.Field>\n                        <label>Value</label>\n                        <Input\n                            value={this.state.value}\n                            label=\"wei\"\n                            labelPosition=\"right\"\n                            onChange={(event) => this.setState({ value: event.target.value })}\n                        />\n                    </Form.Field>\n\n                    <Form.Field>\n                        <label>Recipient</label>\n                        <Input\n                            value={this.state.recipient}\n                            onChange={(event) =>\n                                this.setState({ recipient: event.target.value })\n                            }\n                        />\n                    </Form.Field>\n                    <Message error header=\"Oops!\" content={this.state.errorMessage}/>\n                    <Button primary loading={this.state.loading}>Create!</Button>\n                </Form>\n        )\n    }\n};\n\nexport default RequestForm;\n","import React, {Component} from \"react\";\nimport {Table, Button, Message} from \"semantic-ui-react\";\n\nimport web3 from \"../web3\";\nimport Fund from \"../fund\";\n\nclass RequestRow extends  Component {\n    state = {\n        loading: false,\n        errorMessage: ''\n    };\n    onApprove = async () => {\n        console.log(\"======================>\")\n        console.log(this.props);\n        console.log(\"======================>\")\n        this.setState({loading: true, errorMessage: ''});\n\n        const fund = Fund(this.props.address);\n        try {\n            const currentAccount = await web3.givenProvider.selectedAddress;\n            await fund.methods.approveRequest(this.props.id).send({\n                from: currentAccount\n            });\n\n            window.location.reload(); //refresh the current detail page -> show the donated amount inside\n        }\n        catch (err) {\n            console.log(\"======================>\")\n            console.log(err.message);\n            console.log(\"======================>\")\n            this.setState({ errorMessage: err.message});\n        }\n        this.setState({loading: false});\n    };\n\n\n    render() {\n        const { Row, Cell } = Table;\n        const {id, request, donatorsCount } = this.props;\n        return (\n            <Row>\n                <Cell>{id}</Cell>\n                <Cell>{request.description}</Cell>\n                <Cell>{web3.utils.fromWei(request.value,'ether')}</Cell>\n                <Cell>{request.recipient}</Cell>\n                <Cell>{request.approvalCount}/{donatorsCount}</Cell>\n                <Cell>\n                    {!request.complete &&\n                    <Button color=\"blue\" basic loading={this.state.loading}\n                            onClick={this.onApprove}>Approve</Button>\n\n                    }\n                </Cell>\n            </Row>\n        );\n    }\n}\nexport default  RequestRow;\n","import React from \"react\";\n//Semantic UI\nimport {Button, Card, Form, Grid, Input, Message, Table} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n//React-Route\nimport {Link, withRouter} from 'react-router-dom'\n\nimport web3 from \"../web3\";\nimport Fund from \"../fund\";\nimport ContributeForm from \"./ContributeForm\";\nimport RequestForm from \"./RequestForm\";\nimport RequestRow from \"./RequestRow\";\n\nclass FundDetail extends React.Component {\n    //1. This is part of the constructor will be invoked when page launch index.js\n    state = {\n        fundAddress: '',\n        fundName: '',\n        balance: '',\n        numRequests: '',\n        donatorsCount: '',\n        manager: '',\n        requests: []\n    };\n\n\n\n    //3. This will be invoked after rendering\n    //state.manager changed\n    //4. state change will cause the re-render!\n    async componentDidMount() {\n        const fundAddress = this.props.match.params.fundAddress; //Passed from Welcome.js\n        this.setState({fundAddress});\n\n        const fund = Fund(fundAddress);\n\n        const summary = await fund.methods.getSummary().call();\n\n        console.log(\"=====>\");\n        console.log(summary[0]);\n\n        this.setState({\n            fundAddress: fundAddress,\n            fundName: summary[0],\n            balance: summary[1],\n            numRequests: summary[2],\n            donatorsCount: summary[3],\n            manager: summary[4]\n        })\n\n        console.log(\"=====>\");\n        console.log(\"=====>\");\n        console.log(\"=====>\");\n        //To get Requests\n        const requests = await Promise.all(\n            Array(parseInt(this.state.numRequests))\n                .fill()\n                .map((element, index) => {\n                    return fund.methods.requests(index).call();\n                })\n        );\n\n        this.setState({\n            requests: requests,\n        })\n\n    }\n\n    renderRequestRows() {\n        return this.state.requests.map((request,index)=>{\n            return <RequestRow\n                key={index}\n                id={index}\n                request={request}\n                address={this.state.fundAddress}\n                donatorsCount={this.state.donatorsCount}\n            />;\n        });\n    }\n\n    renderFund() {\n        const items = [{\n            header: this.state.fundName,\n            meta: \"Fund Name\",\n            description:\n                \"The name of this fund\",\n            style: { overflowWrap: \"break-word\" },\n        },\n            {\n            header: this.state.manager,\n            meta: \"Address of Manager\",\n            description:\n                \"The manager created this Fund and can create requests to withdraw money\",\n            style: { overflowWrap: \"break-word\" },\n        },\n            {\n                header: this.state.numRequests,\n                meta: \"Number of Requests\",\n                description:\n                    \"A request tries to withdraw money from the contract. Requests must be approved by donators\",\n            },\n            {\n                header: this.state.donatorsCount,\n                meta: \"Number of Donators\",\n                description:\n                    \"Number of people who have already donated to this fund\",\n            },\n            {\n                header: web3.utils.fromWei(this.state.balance, \"ether\"),\n                meta: \"Fund Balance (ether)\",\n                description:\n                    \"The balance is how much money this fund has left to spend.\",\n            },\n        ];\n\n        return <Card.Group items={items}/>;\n    }\n\n    //2. render to be called\n    render() {\n        return (\n            <div >\n                <Link to='/'><img src={process.env.PUBLIC_URL + '/charity.jpeg'} width=\"100%\" height=\"150\" /></Link>\n                <Grid padded>\n                    <Grid.Row>\n                        <Grid.Column width={10} >\n                            <h2>Fund Detail</h2>\n                            <div>{this.renderFund()}</div>\n                        </Grid.Column>\n                        <Grid.Column width={6}>\n                            <h2>Donation</h2>\n                            <ContributeForm address={this.state.fundAddress}/>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column width={10}>\n                            <h2>Request List</h2>\n                            <Table>\n                                <Table.Header>\n                                    <Table.Row>\n                                        <Table.HeaderCell>ID</Table.HeaderCell>\n                                        <Table.HeaderCell>Description</Table.HeaderCell>\n                                        <Table.HeaderCell>Amount</Table.HeaderCell>\n                                        <Table.HeaderCell>Recipient</Table.HeaderCell>\n                                        <Table.HeaderCell>App Num</Table.HeaderCell>\n                                        <Table.HeaderCell>Approve</Table.HeaderCell>\n                                    </Table.Row>\n                                </Table.Header>\n                                <Table.Body>\n                                    {this.renderRequestRows()}\n                                </Table.Body>\n                            </Table>\n                        </Grid.Column>\n                        <Grid.Column width={6} >\n                            <h2>Creat Request</h2>\n                            <RequestForm address={this.state.fundAddress}/>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n\n            </div>\n        );\n    }\n}\nexport default withRouter(FundDetail);\n\n\n","//React-Route\nimport React from \"react\";\nimport {Redirect, Route} from 'react-router-dom'\nimport Welcome from \"./pages/Welcome\";\nimport FundDetail from \"./pages/FundDetail\";\n\nclass App extends React.Component {\n\n  render() {\n    return (\n        <div >\n            <Route exact path=\"/\">\n                <Welcome/>\n            </Route>\n            <Route exact path=\"/fund\">\n                <Welcome/>\n            </Route>\n            <Route exact path=\"/detail/:fundAddress\">\n                    <FundDetail/>\n            </Route>\n\n\n        </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}