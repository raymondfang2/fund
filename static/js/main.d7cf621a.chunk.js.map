{"version":3,"sources":["logo.svg","web3.js","factory.js","App.js","reportWebVitals.js","index.js"],"names":["window","ethereum","request","method","web3","Web3","instance","eth","Contract","FundFactory","abi","App","state","charityOwner","funds","fundName","onSubmit","event","a","preventDefault","givenProvider","selectedAddress","currentAccount","console","log","factory","methods","raiseFund","send","from","call","getFunds","this","setState","length","value","onChange","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0r/YAAe,I,wBCEfA,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAClC,IAEeC,EAFD,IAAIC,IAAKL,OAAOC,U,SCMfK,EANE,IAAIF,EAAKG,IAAIC,SAC5BC,EAAYC,IACZ,8C,iBCkEaC,E,4MA7DbC,MAAQ,CACNC,aAAc,GACdC,MAAM,GACNC,SAAU,I,EAcZC,S,uCAAW,WAAOC,GAAP,eAAAC,EAAA,6DACTD,EAAME,iBADG,SAIoBf,EAAKgB,cAAcC,gBAJvC,cAIHC,EAJG,OAKTC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,GANH,SAQHG,EAAQC,QAAQC,UAAU,EAAKf,MAAMG,UAAUa,KAAK,CAExDC,KAAMP,IAVC,2C,oJARX,8BAAAJ,EAAA,sEAC6BO,EAAQC,QAAQb,eAAeiB,OAD5D,cACQjB,EADR,gBAEsBY,EAAQC,QAAQK,WAAWD,OAFjD,OAEQhB,EAFR,OAGES,QAAQC,IAAI,UACZD,QAAQC,IAAIX,GACZmB,KAAKC,SAAS,CAAEpB,eAAcC,UALhC,gD,0EA2BA,WAAU,IAAD,OACP,OACI,gCACE,0HAEE,6DAAgCkB,KAAKpB,MAAMC,gBAC3C,qDAAwBmB,KAAKpB,MAAME,MAAMoB,OAAzC,YAEF,uBACA,uBAAMlB,SAAUgB,KAAKhB,SAArB,UACE,kDACA,gCACE,+CACA,uBACImB,MAASH,KAAKpB,MAAMG,SACpBqB,SAAU,SAAAnB,GAAU,EAAKgB,SAAS,CAAClB,SAAUE,EAAMoB,OAAOF,cAGhE,0D,GAxDMG,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7cf621a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Web3 from \"web3\";\n\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\nconst  web3 = new Web3(window.ethereum);\n\nexport default web3;\n","import web3 from \"./web3\";\nimport FundFactory from \"./contracts/FundFactory.json\";\n\nconst instance = new web3.eth.Contract(\n  FundFactory.abi,\n  \"0x6969853dEEd9C3F1EeEC96188f8542d250C69665\"\n);\n//replace the above address with the output of \"truffle migrate ...\" --> the contract address of FundFactory\n//Only the account deployed the above factory can raise fund --> the charityOwner\nexport default instance;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\n\nimport web3 from \"./web3\";\nimport factory from \"./factory\";\nimport fund from \"./fund\";\n\nclass App extends React.Component {\n  //1. This is part of the constructor will be invoked when page launch index.js\n  state = {\n    charityOwner: '',\n    funds:[],\n    fundName: '',\n  };\n\n  //3. This will be invoked after rendering\n  //state.manager changed\n  //4. state change will cause the re-render!\n  async componentDidMount() {\n    const charityOwner = await factory.methods.charityOwner().call();\n    const funds = await factory.methods.getFunds().call();\n    console.log(\"=====>\");\n    console.log(charityOwner);\n    this.setState({ charityOwner, funds });\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault(); //Not classical html way\n\n    //const accounts = await web3.eth.getAccounts();\n    const currentAccount = await web3.givenProvider.selectedAddress;\n    console.log(\"<======\");\n    console.log(currentAccount);\n\n    await factory.methods.raiseFund(this.state.fundName).send({\n      //from: accounts[0]\n      from: currentAccount\n    });\n\n\n  }\n\n\n\n  //2. render to be called\n  render() {\n    return (\n        <div >\n          <h2>Charity - Everything in this charity is transparent and can be audited in the Ethereum!.</h2>\n\n            <p>This contract is managed by {this.state.charityOwner}</p>\n            <p>There are currently {this.state.funds.length} funds</p>\n\n          <hr />\n          <form onSubmit={this.onSubmit}>\n            <h4>Raise a new Fund</h4>\n            <div>\n              <label>Fund Name:</label>\n              <input\n                  value = {this.state.fundName}\n                  onChange={event => {this.setState({fundName: event.target.value} )}}\n              />\n            </div>\n            <button>Raise Fund</button>\n          </form>\n\n        </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}